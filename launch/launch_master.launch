<launch>
    <arg name="droneip" default="192.168.1.1" />
    <node name="ardrone_driver" pkg="ardrone_autonomy" type="ardrone_driver" output="screen" args="-ip $(arg droneip)">
        <param name="navdata_demo" value="False" />
        <param name="realtime_navdata" value="True" />
        <param name="realtime_video" value="True" />
        <param name="looprate" value="50" />

        <param name="altitude_max" value="100000" />
        <param name="altitude_min" value="50" />
        
        <param name="control_vz_max" value="2000" />
        <param name="control_yaw" value="6.11" />
        <param name="euler_angle_max" value="0.35" />
    </node>

    <node pkg="vrpn_client_ros" type="vrpn_client_node" name="vrpn_client_node" output="screen">
        <rosparam subst_value="true">
        server: 192.168.0.100
        port: 3883

        update_frequency: 100.0
        frame_id: world

        # Use the VRPN server's time, or the client's ROS time.
        use_server_time: false
        broadcast_tf: true

        # Must either specify refresh frequency > 0.0, or a list of trackers to create
        refresh_tracker_frequency: 1.0
        #trackers:
        #- FirstTracker
        #- SecondTracker
        </rosparam>
    </node>

    <!-- Controller for drone's X axis -->
    <node name="controller" pkg="pid" type="controller" ns="drone_x" output="screen" >
      <param name="node_name" value="drone_x_pid" />
      <param name="Kp" value="0.05" />
      <param name="Ki" value="0.01" />
      <param name="Kd" value="0.0" />
      <param name="upper_limit" value="1" />
      <param name="lower_limit" value="-1" />
      <param name="windup_limit" value="1" />
      <param name="cutoff_frequency" value="20" />
      <param name="diagnostic_period" value="0.25" />
      <param name="max_loop_frequency" value="55.0" />
      <param name="min_loop_frequency" value="45.0" />
     </node>
    
     <!-- Controller for drone's Y axis -->

    <node name="controller" pkg="pid" type="controller" ns="drone_y" output="screen" >
      <param name="node_name" value="drone_y_pid" />
      <param name="Kp" value="0.05" />
      <param name="Ki" value="0.01" />
      <param name="Kd" value="0.0" />
      <param name="upper_limit" value="0.2" />
      <param name="lower_limit" value="-0.2" />
      <param name="windup_limit" value="1" />
      <param name="cutoff_frequency" value="20" />
      <param name="diagnostic_period" value="0.25" />
      <param name="max_loop_frequency" value="55.0" />
      <param name="min_loop_frequency" value="45.0" />
     </node>

    <!-- Controller for drone's Z axis -->
    
    <node name="controller" pkg="pid" type="controller" ns="drone_z" output="screen" >
      <param name="node_name" value="drone_z_pid" />
      <param name="Kp" value="0.5" />
      <param name="Ki" value="0.1" />
      <param name="Kd" value="0.0" />
      <param name="upper_limit" value="1" />
      <param name="lower_limit" value="-1" />
      <param name="windup_limit" value="1" />
      <param name="cutoff_frequency" value="20" />
      <param name="diagnostic_period" value="0.25" />
      <param name="max_loop_frequency" value="55.0" />
      <param name="min_loop_frequency" value="45.0" />
     </node>

   <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
      <rosparam command="delete" param="/diagnostic_aggregator" />
      <rosparam command="load" file="$(find pid)/config/pid_diags.yaml" />
   </node>

   <!-- rqt_plot is a resource hog, so if you're seeing high CPU usage, don't launch rqt_plot  -->
    <node name="rqt_plot" pkg="rqt_plot" type="rqt_plot"
    args=  "/drone_x/control_effort/data /drone_x/state/data /drone_x/setpoint/data
            /drone_z/control_effort/data /drone_z/state/data /drone_z/setpoint/data
            /drone_y/control_effort/data /drone_y/state/data /drone_y/setpoint/data" />

    <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" />

    <node name="rqt_robot_monitor" pkg="rqt_robot_monitor" type="rqt_robot_monitor" />

</launch>

<!--

rostopic pub -r 10 /cmd_vel geometry_msgs/Twist  '{linear:  {x: 0.0, y: 0.0, z: 0.3}, angular: {x: 0.0,y: 0.0,z: 0.0}}'
rostopic pub -r 10 /cmd_vel geometry_msgs/Twist  '{linear:  {x: 0.0, y: 0.0, z: -0.2}, angular: {x: 0.0,y: 0.0,z: 0.0}}'
rostopic pub -r 10 /cmd_vel geometry_msgs/Twist  '{linear:  {x: 0.0, y: 0.1, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}'


-->
